name: Context and Environment Variables
on: [push]

# Environment variable
# -------------------
# Environment variable lives inside the "Runner machine", When our workflow send in the "Runner machine"
# This value it print from inside the "Runner machine (Ubuntu)", as it is available on the ubunut so we can print 
# env variable starts with a "$"  sign
# $ as it is from the environment from machine so we can not evluate it with "if" statement

# Variable from "Context"
# ------------------------ 
# It is defined by the github-actions and it is evaluated by the github and we are taking value from the "github" directly
#  this value is added from outside the runner maching, As this variable comes from githun so we need to print like this
# '${{ env.MY_STEP_ENV }}'     <-- as it is from github so we can eveluate it with  "if" statement 

#Note:  "if" case if always evaluated before the workflow is sended to the "Runner machine"

# "$GITHUB_ENV"   <-- it is the file name for "Ubunut" where all the Env variables are defined

env:
  MY_ENV: This variable is available for all jobs

jobs: 
  my-env-vars-and-context:             
    runs-on: ubuntu-latest      
   # if: $GITHUB_REF = 'refs/head/main '   # - never check like this as it check a evv variable on the machine, but we need it from github
    if: github.ref == 'refs/heads/main'        # so check it as a context variable 
    env:
      MY_JOB_LEVEL_ENV: This env variable is available only to all steps inside the  "my-env-vars-and-context"
    steps:                             
      - name: Log Environmen variable    
        run: echo $GITHUB_REF             
      - name: Log Context            
        run: echo '${{ github.ref }}'
      - name: Set Environment Variable
        run: |                                             # Below we are creating a Env variable for the whole machine, so any step or workflow can fetch it
          echo "SUNNY_ENV_NEW=$(date)"  >> "$GITHUB_ENV"   
          echo "MY_JOB_LEVEL_ENV=$RANDOM" >>  "$GITHUB_ENV"
      - name: Multiline Environemnt varaible
        run: |
          DELIMETER=1234
          echo "ANY_RANDOM_VAR<<$DELIMETER" >> "$GITHUB_ENV"
          echo "Here is a so much" >> "$GITHUB_ENV"
          echo "Here is a so much" >> "$GITHUB_ENV"
          echo "" >> "$GITHUB_ENV"           
          echo "$DELIMETER" >> "$GITHUB_ENV"
      - name: Log Custom ENV Vars
        env:     
          MY_STEP_ENV: This is available only inside this step
          MY_ENV: like this we can override the workflow-level env , as it is defined on the top above
        run: |
          echo MY_STEP_ENV:      '${{ env.MY_STEP_ENV }}'        
          echo MY_STEP_ENV:       $MY_STEP_ENV
          echo MY_ENV:            $MY_ENV
          echo MY_JOB_LEVEL_ENV   $MY_JOB_LEVEL_ENV
          echo SUNNY_NEW_ENV      $SUNNY_NEW_ENV
          echo MY_BUNNY           $MY_BUNNY
                                       
                                        
